<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hack.io</name>
    </assembly>
    <members>
        <member name="T:Hack.io.Util.Archive">
            <summary>
            The base class for Archive like systems
            </summary>
        </member>
        <member name="P:Hack.io.Util.Archive.FileName">
            <summary>
            Filename of this Archive.
            <para/>Set using <see cref="M:Hack.io.Util.Archive.Save(System.String)"/>;
            </summary>
        </member>
        <member name="P:Hack.io.Util.Archive.Name">
            <summary>
            Get the name of the archive without the path
            </summary>
        </member>
        <member name="P:Hack.io.Util.Archive.Root">
            <summary>
            The Root Directory of the Archive
            </summary>
        </member>
        <member name="P:Hack.io.Util.Archive.TotalFileCount">
            <summary>
            The total amount of files inside this archive.
            </summary>
        </member>
        <member name="M:Hack.io.Util.Archive.Read(System.IO.Stream)">
            <summary>
            The Binary I/O function for reading the file
            </summary>
            <param name="ArchiveFile"></param>
        </member>
        <member name="M:Hack.io.Util.Archive.Write(System.IO.Stream)">
            <summary>
            The Binary I/O function for writing the file
            </summary>
            <param name="ArchiveFile"></param>
        </member>
        <member name="M:Hack.io.Util.Archive.Save(System.String)">
            <summary>
            Save the Archive to a File
            </summary>
            <param name="filepath">New file to save to</param>
        </member>
        <member name="M:Hack.io.Util.Archive.Save(System.IO.Stream)">
            <summary>
            Write the Archive to a Stream
            </summary>
            <param name="RARCFile"></param>
        </member>
        <member name="M:Hack.io.Util.Archive.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hack.io.Util.Archive.Item(System.String)">
            <summary>
            Get or Set a file based on a path. When setting, if the file doesn't exist, it will be added (Along with any missing subdirectories). Set the file to null to delete it
            </summary>
            <param name="Path">The Path to take. Does not need the Root name to start, but cannot start with a '/'</param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Archive.OnItemSet(System.Object,System.String)">
            <summary>
            Executed when you use ArchiveBase["FilePath"] to set a file
            </summary>
            <param name="value"></param>
            <param name="Path"></param>
        </member>
        <member name="M:Hack.io.Util.Archive.ItemExists(System.String,System.Boolean)">
            <summary>
            Checks to see if an Item Exists based on a Path
            </summary>
            <param name="Path">The path to take</param>
            <param name="IgnoreCase">Ignore casing of the file</param>
            <returns>false if the Item isn't found</returns>
        </member>
        <member name="M:Hack.io.Util.Archive.GetItemKeyFromNoCase(System.String)">
            <summary>
            This will return the absolute path of an item if it exists in some way. Useful if you don't know the casing of the filename inside the file. Returns null if nothing is found.
            </summary>
            <param name="Path">The path to get the Actual path from</param>
            <returns>null if nothing is found</returns>
        </member>
        <member name="M:Hack.io.Util.Archive.ClearAll">
            <summary>
            Clears all the files out of this archive
            </summary>
        </member>
        <member name="M:Hack.io.Util.Archive.MoveItem(System.String,System.String)">
            <summary>
            Moves an item to a new directory
            </summary>
            <param name="OriginalPath"></param>
            <param name="NewPath"></param>
        </member>
        <member name="M:Hack.io.Util.Archive.FindItems(System.String,System.Boolean,System.Boolean)">
            <summary>
            Search the archive for files that match the regex
            </summary>
            <param name="Pattern">The regex pattern to use</param>
            <param name="RootLevelOnly">If true, all subdirectories will be skipped</param>
            <param name="IgnoreCase">Ignore the filename casing</param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Archive.Import(System.String)">
            <summary>
            Create an Archive from a Folder
            </summary>
            <param name="Folderpath">Folder to make an archive from</param>
        </member>
        <member name="M:Hack.io.Util.Archive.Export(System.String,System.Boolean)">
            <summary>
            Dump the contents of this archive to a folder
            </summary>
            <param name="FolderPath">The Path to save to. Should be a folder</param>
            <param name="Overwrite">If there are contents already at the chosen location, delete them?</param>
        </member>
        <member name="M:Hack.io.Util.Archive.NewDirectory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Archive.NewDirectory(Hack.io.Util.Archive,Hack.io.Util.ArchiveDirectory)">
            <summary>
            
            </summary>
            <param name="Owner"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Archive.NewDirectory(System.String,Hack.io.Util.Archive)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="Owner"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.ArchiveDirectory">
            <summary>
            Folder contained inside the Archive. Can contain more <see cref="T:Hack.io.Util.ArchiveDirectory"/>s if desired, as well as <see cref="T:Hack.io.Util.ArchiveFile"/>s
            </summary>
        </member>
        <member name="P:Hack.io.Util.ArchiveDirectory.Name">
            <summary>
            The name of the Directory
            </summary>
        </member>
        <member name="P:Hack.io.Util.ArchiveDirectory.Items">
            <summary>
            The contents of this directory.
            </summary>
        </member>
        <member name="P:Hack.io.Util.ArchiveDirectory.Parent">
            <summary>
            The parent directory (Null if non-existant)
            </summary>
        </member>
        <member name="F:Hack.io.Util.ArchiveDirectory.OwnerArchive">
            <summary>
            The Archive that owns this directory
            </summary>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.#ctor">
            <summary>
            Create a new Archive Directory
            </summary>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.#ctor(Hack.io.Util.Archive,Hack.io.Util.ArchiveDirectory)">
            <summary>
            Create a new, child directory
            </summary>
            <param name="Owner">The Owner Archive</param>
            <param name="parentdir">The Parent Directory. NULL if this is the Root Directory</param>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.#ctor(System.String,Hack.io.Util.Archive)">
            <summary>
            Import a Folder into a RARCDirectory
            </summary>
            <param name="FolderPath"></param>
            <param name="Owner"></param>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.Export(System.String)">
            <summary>
            Export this Directory to a folder.
            </summary>
            <param name="FolderPath">Folder to Export to. Don't expect the files to appear here. Expect a Folder with this <see cref="P:Hack.io.Util.ArchiveDirectory.Name"/> to appear</param>
        </member>
        <member name="P:Hack.io.Util.ArchiveDirectory.Item(System.String)">
            <summary>
            Get or Set a file based on a path. When setting, if the file doesn't exist, it will be added (Along with any missing subdirectories)
            </summary>
            <param name="Path">The Path to take</param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.ItemExists(System.String,System.Boolean)">
            <summary>
            Checks to see if an Item Exists based on a Path
            </summary>
            <param name="Path">The path to take</param>
            <param name="IgnoreCase">Ignore casing</param>
            <returns>false if the Item isn't found</returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.ItemKeyExists(System.String,System.Boolean)">
            <summary>
            Checks to see if an item exists in this directory only
            </summary>
            <param name="ItemName">The name of the Item to look for (Case Sensitive)</param>
            <param name="IgnoreCase">Ignore casing</param>
            <returns>false if the Item doesn't exist</returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.GetItemKeyFromNoCase(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <param name="AttachRootName"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.Clear">
            <summary>
            Clears all the items out of this directory
            </summary>
        </member>
        <member name="P:Hack.io.Util.ArchiveDirectory.Count">
            <summary>
            Returns the amount of Items in this directory (Items in subdirectories not included)
            </summary>
        </member>
        <member name="P:Hack.io.Util.ArchiveDirectory.FullPath">
            <summary>
            The full path of this directory. Cannot be used if this .arc doesn't belong to a RARC object
            </summary>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.GetFullPath(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.GetCountAndChildren">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hack.io.Util.ArchiveDirectory.HasOwnerArchive">
            <summary>
            Checks to see if this directory has an owner archive
            </summary>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.SortItemsByOrder(System.String[])">
            <summary>
            Sorts the Items inside this directory using the provided string[]. This string[] MUST contain all entries inside this directory
            </summary>
            <param name="NewItemOrder"></param>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.MoveItemToDirectory(System.String,Hack.io.Util.ArchiveDirectory)">
            <summary>
            Moves an item from it's current directory to a new directory
            </summary>
            <param name="ItemKey">The Key of the Item</param>
            <param name="TargetDirectory"></param>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.RenameItem(System.String,System.String)">
            <summary>
            Rename an item in the directory
            </summary>
            <param name="OldName"></param>
            <param name="NewName"></param>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.FindItems(System.String,System.Boolean,System.Boolean)">
            <summary>
            Search the directory for files that match the regex
            </summary>
            <param name="Pattern">The regex pattern to use</param>
            <param name="TopLevelOnly">If true, all subdirectories will be skipped</param>
            <param name="IgnoreCase">Ignore the filename casing</param>
            <returns>List of Item Keys</returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.CreateFromFolder(System.String,Hack.io.Util.Archive)">
            <summary>
            Create an ArchiveDirectory. You cannot use this function unless this directory is empty
            </summary>
            <param name="FolderPath"></param>
            <param name="OwnerArchive"></param>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.NewDirectory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.NewDirectory(Hack.io.Util.Archive,Hack.io.Util.ArchiveDirectory)">
            <summary>
            
            </summary>
            <param name="Owner"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveDirectory.NewDirectory(System.String,Hack.io.Util.Archive)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="Owner"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.ArchiveFile">
            <summary>
            File contained inside the Archive
            </summary>
        </member>
        <member name="P:Hack.io.Util.ArchiveFile.Name">
            <summary>
            Name of the File
            </summary>
        </member>
        <member name="P:Hack.io.Util.ArchiveFile.Extension">
            <summary>
            The extension of this file
            </summary>
        </member>
        <member name="P:Hack.io.Util.ArchiveFile.FileData">
            <summary>
            The Actual Data for the file
            </summary>
        </member>
        <member name="P:Hack.io.Util.ArchiveFile.Parent">
            <summary>
            The parent directory (Null if non-existant)
            </summary>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.#ctor">
            <summary>
            Empty file
            </summary>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.#ctor(System.String)">
            <summary>
            Load a File's Data based on a path
            </summary>
            <param name="Filepath"></param>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.#ctor(System.String,System.IO.MemoryStream)">
            <summary>
            Create a File from a MemoryStream
            </summary>
            <param name="name">The name of the file</param>
            <param name="ms">The Memory Stream to use</param>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.Save(System.String)">
            <summary>
            Saves this file to the Computer's Disk
            </summary>
            <param name="Filepath">The full path to save to</param>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.op_Equality(Hack.io.Util.ArchiveFile,Hack.io.Util.ArchiveFile)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.op_Inequality(Hack.io.Util.ArchiveFile,Hack.io.Util.ArchiveFile)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.Equals(System.Object)">
            <summary>
            Compare this file to another
            </summary>
            <param name="obj">The Object to check</param>
            <returns>True if the files are identical</returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hack.io.Util.ArchiveFile.FullPath">
            <summary>
            The full path of this file. Cannot be used if this file doesn't belong to a RARC object somehow
            </summary>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.GetFullPath(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:Hack.io.Util.ArchiveFile.op_Explicit(Hack.io.Util.ArchiveFile)~System.IO.MemoryStream">
            <summary>
            Cast a File to a MemoryStream
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:Hack.io.Util.Int24">
            <summary>
            I need this because Nintendo had this strange idea that using Int24 is OK
            </summary>
        </member>
        <member name="F:Hack.io.Util.Int24.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hack.io.Util.Int24.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hack.io.Util.Int24.BitMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hack.io.Util.Int24.Value">
            <summary>
            The value of this Int24 as an Int32
            </summary>
        </member>
        <member name="M:Hack.io.Util.Int24.#ctor(System.Int32)">
            <summary>
            Create a new Int24
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Addition(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Subtraction(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Multiply(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Division(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Modulus(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_BitwiseAnd(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_BitwiseOr(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_ExclusiveOr(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_RightShift(Hack.io.Util.Int24,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_LeftShift(Hack.io.Util.Int24,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_OnesComplement(Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Increment(Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Decrement(Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Equality(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Inequality(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_GreaterThan(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_LessThan(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_GreaterThanOrEqual(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_LessThanOrEqual(Hack.io.Util.Int24,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Addition(System.Byte,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Addition(System.Int16,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Addition(System.UInt16,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Addition(System.Int32,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Addition(System.UInt32,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Addition(System.Int64,Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.ToString(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(System.Byte)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.Int24)~System.Byte">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(System.SByte)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.Int24)~System.SByte">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(System.Int16)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.Int24)~System.Int16">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(System.UInt16)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.Int24)~System.UInt16">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.UInt24)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.Int24)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(System.Int32)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.Int24)~System.Int32">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(System.UInt32)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.Int24)~System.UInt32">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(System.Int64)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.Int24)~System.Int64">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(System.UInt64)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.Int24.op_Explicit(Hack.io.Util.Int24)~System.UInt64">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:Hack.io.Util.UInt24">
            <summary>
            I need this because Nintendo had this strange idea that using UInt24 is OK
            </summary>
        </member>
        <member name="F:Hack.io.Util.UInt24.BitMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hack.io.Util.UInt24.Value">
            <summary>
            The value of this Int24 as an Int32
            </summary>
        </member>
        <member name="M:Hack.io.Util.UInt24.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Addition(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Subtraction(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Multiply(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Division(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Modulus(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_BitwiseAnd(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_BitwiseOr(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_ExclusiveOr(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_RightShift(Hack.io.Util.UInt24,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_LeftShift(Hack.io.Util.UInt24,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_OnesComplement(Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Increment(Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Decrement(Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Equality(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Inequality(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_GreaterThan(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_LessThan(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_GreaterThanOrEqual(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_LessThanOrEqual(Hack.io.Util.UInt24,Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.ToString(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(System.Byte)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.UInt24)~System.Byte">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(System.SByte)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.UInt24)~System.SByte">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(System.Int16)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.UInt24)~System.Int16">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(System.UInt16)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.UInt24)~System.UInt16">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.Int24)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.UInt24)~Hack.io.Util.Int24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(System.Int32)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.UInt24)~System.Int32">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(System.UInt32)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.UInt24)~System.UInt32">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(System.Int64)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.UInt24)~System.Int64">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(System.UInt64)~Hack.io.Util.UInt24">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Hack.io.Util.UInt24.op_Explicit(Hack.io.Util.UInt24)~System.UInt64">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:Hack.io.Util.MessageBoxManager">
            <summary>
            Used for custom message boxes
            </summary>
        </member>
        <member name="T:Hack.io.Util.MessageBoxManager.CWPRETSTRUCT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.CWPRETSTRUCT.lResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.CWPRETSTRUCT.lParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.CWPRETSTRUCT.wParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.CWPRETSTRUCT.message">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.CWPRETSTRUCT.hwnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.OK">
            <summary>
            OK text
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.Cancel">
            <summary>
            Cancel text
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.Abort">
            <summary>
            Abort text
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.Retry">
            <summary>
            Retry text
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.Ignore">
            <summary>
            Ignore text
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.Yes">
            <summary>
            Yes text
            </summary>
        </member>
        <member name="F:Hack.io.Util.MessageBoxManager.No">
            <summary>
            No text
            </summary>
        </member>
        <member name="M:Hack.io.Util.MessageBoxManager.Register">
            <summary>
            Enables MessageBoxManager functionality
            </summary>
            <remarks>
            MessageBoxManager functionality is enabled on current thread only.
            Each thread that needs MessageBoxManager functionality has to call this method.
            </remarks>
        </member>
        <member name="M:Hack.io.Util.MessageBoxManager.Unregister">
            <summary>
            Disables MessageBoxManager functionality
            </summary>
            <remarks>
            Disables MessageBoxManager functionality on current thread only.
            </remarks>
        </member>
        <member name="T:Hack.io.Util.ListEx">
            <summary>
            Extra List functions
            </summary>
        </member>
        <member name="M:Hack.io.Util.ListEx.ContainsSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Finds out if a sequence exists in a list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence"></param>
            <param name="subsequence"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ListEx.SubListIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Finds a list inside a list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="start">The index to Start searching from</param>
            <param name="sublist">The list to find</param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ListEx.Move``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Moves an item X distance in a list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="OldIndex">The original index of the item</param>
            <param name="NewIndex">The new index of the item</param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ListEx.SortBy``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            Sort a list of items based on an array of items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="OriginalList"></param>
            <param name="sortref">The list to reference while sorting</param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ListEx.Equals``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Compares the contents of two lists to see if they match
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ListEx.Equals``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Compares the contents of the two lists using a custom function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="comparefunc"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.ListEx.GetHashCode``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Gets a hash code from a List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="starting"></param>
            <param name="additive"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.StringEx">
            <summary>
            Extra String functions
            </summary>
        </member>
        <member name="M:Hack.io.Util.StringEx.WildCardToRegular(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.FileInfoEx">
            <summary>
            Extra FileInfo functions
            </summary>
        </member>
        <member name="M:Hack.io.Util.FileInfoEx.IsFileLocked(System.IO.FileInfo)">
            <summary>
            Check if a file cannot be opened.
            </summary>
            <param name="file">File to check for</param>
            <returns>If the file is locked, returns true.</returns>
        </member>
        <member name="T:Hack.io.Util.BitArrayEx">
            <summary>
            Extra BitArray functions
            </summary>
        </member>
        <member name="M:Hack.io.Util.BitArrayEx.ToInt32(System.Collections.BitArray)">
            <summary>
            Converts this BitArray to an Int32
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.BitConverterEx">
            <summary>
            Extra BitConverter functions
            </summary>
        </member>
        <member name="M:Hack.io.Util.BitConverterEx.ToInt24(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="StartIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.BitConverterEx.GetBytes(Hack.io.Util.Int24)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.BitConverterEx.ToUInt24(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="StartIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.BitConverterEx.GetBytes(Hack.io.Util.UInt24)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.Benchmark">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hack.io.Util.Benchmark.Span">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hack.io.Util.Benchmark.Start">
            <summary>
            Starts the timer
            </summary>
        </member>
        <member name="M:Hack.io.Util.Benchmark.End">
            <summary>
            Ends the Timer
            </summary>
        </member>
        <member name="M:Hack.io.Util.Benchmark.GetSeconds">
            <summary>
            Gets the elapsed seconds
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.EncodingEx">
            <summary>
            Extra Encoding functions
            </summary>
        </member>
        <member name="M:Hack.io.Util.EncodingEx.GetStride(System.Text.Encoding)">
            <summary>
            Gets the amount of bytes this Encoding uses
            </summary>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.MathEx">
            <summary>
            Extra math functions
            </summary>
        </member>
        <member name="M:Hack.io.Util.MathEx.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps a value to the specified minimum and maximum value
            </summary>
            <typeparam name="T">IComparable</typeparam>
            <param name="val">The value to clamp</param>
            <param name="min">Minimum value to clamp to</param>
            <param name="max">Maximum value to clamp to</param>
            <returns>Max or Min, depending on Val</returns>
        </member>
        <member name="M:Hack.io.Util.MathEx.Lerp(System.Byte,System.Byte,System.Single)">
            <summary>
            Lerp 2 bytes via a time
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.MathEx.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Lerp 2 floats via a time
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.MathEx.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Lerp 2 floats via a time
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.MathEx.GetPercentOf(System.Single,System.Single,System.Single)">
            <summary>
            Gets the percent value of a given number. Usually used by Background Workers
            </summary>
            <param name="Current"></param>
            <param name="Max"></param>
            <param name="OutOf"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.MathEx.Scale(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales a number between W and X to be between Y and Z
            </summary>
            <param name="valueIn"></param>
            <param name="baseMin"></param>
            <param name="baseMax"></param>
            <param name="limitMin"></param>
            <param name="limitMax"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.MathEx.GetDecimal(System.Double)">
            <summary>
            Returns the decimal part of a number
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.BitmapEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hack.io.Util.BitmapEx.ToByteArray(System.Drawing.Bitmap)">
            <summary>
            Converts a bitmap to a byte[]
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.BitmapEx.FromByteArray(System.Byte[],System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Creates a bitmap from a byte[] (TODO: TEST THIS)
            </summary>
            <param name="data"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.BitmapEx.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Resize the image to the specified width and height.
            </summary>
            <param name="image">The image to resize.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <param name="InterpolationMode"></param>
            <returns>The resized image.</returns>
        </member>
        <member name="M:Hack.io.Util.BitmapEx.Lerp(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32,System.Int32,System.Single,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Generates a lerped bitmap. Useful for mipmapping
            </summary>
            <param name="imageA"></param>
            <param name="imageB"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="t"></param>
            <param name="interpolationMode"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.Util.GenericExtensions">
            <summary>
            Class full of odds and ends that don't belong to a certain group
            </summary>
        </member>
        <member name="M:Hack.io.Util.GenericExtensions.SwapValues``1(``0@,``0@)">
            <summary>
            Swaps two values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Left">Our first contestant</param>
            <param name="Right">Our second contestant</param>
        </member>
        <member name="M:Hack.io.Util.GenericExtensions.SwapValues``1(System.Tuple{``0,``0}@)">
            <summary>
            Swaps two values using a Tuple
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Values">The tuple to swap values of</param>
        </member>
        <member name="M:Hack.io.Util.GenericExtensions.CycleValues``1(System.Boolean,``0[])">
            <summary>
            Cycles an set of objects. Can be cycled backwards
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Reverse">If true, cycles from left to right instead of right to left</param>
            <param name="Values">The values to cycle</param>
        </member>
        <member name="M:Hack.io.Util.GenericExtensions.Equals``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Compares the contents of two dictionaries
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Hack.io.Util.GenericExtensions.Multiply(System.Drawing.Size,System.Int32)">
            <summary>
            Multiplies both width and height by the same number
            </summary>
            <param name="size"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Hack.io.Util.GenericExtensions.Divide(System.Drawing.Size,System.Int32)">
            <summary>
            Divides both width and height by the same number
            </summary>
            <param name="size"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Hack.io.Util.GenericExtensions.NewICollection``2(``1,System.Int32)">
            <summary>
            Creates a new ICollection (Such as a <see cref="T:System.Collections.Generic.List`1"/>) with a specified value for every entry
            </summary>
            <typeparam name="Class"></typeparam>
            <typeparam name="Type"></typeparam>
            <param name="InitValue"></param>
            <param name="Size"></param>
            <returns></returns>
        </member>
        <member name="T:Hack.io.FileStreamEx">
            <summary>
            Extension of the <see cref="T:System.IO.FileStream"/> designed for Big Endian
            </summary>
        </member>
        <member name="M:Hack.io.FileStreamEx.Read(System.IO.FileStream,System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer (For Little Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="Count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or Count is negative.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">Offset and Count describe an invalid range in array.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Hack.io.FileStreamEx.ReadReverse(System.IO.FileStream,System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer... but Backwards! (For Big Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="Count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or Count is negative.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">Offset and Count describe an invalid range in array.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Hack.io.FileStreamEx.WriteReverse(System.IO.FileStream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the file stream... but Backwards! (For Big Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Array">The buffer containing data to write to the stream</param>
            <param name="Offset">The zero-based byte offset in array from which to begin copying bytes to the stream</param>
            <param name="Count">The maximum number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">offset and count describe an invalid range in array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred, or Another thread may have caused an unexpected change in the position of the operating system's file handle</exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed</exception>
            <exception cref="T:System.NotSupportedException">The current stream instance does not support writing</exception>
        </member>
        <member name="M:Hack.io.FileStreamEx.ReadString(System.IO.FileStream)">
            <summary>
            Reads a String from the file. Strings are terminated by 0x00. <para/> The decoded string is in SHIFT-JIS
            </summary>
            <param name="FS"></param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.FileStreamEx.ReadString(System.IO.FileStream,System.Int32)">
            <summary>
            Reads a String from the file. String length is determined by the "<paramref name="StringLength"/>" parameter. <para/> The decoded string is in SHIFT-JIS
            </summary>
            <param name="FS"></param>
            <param name="StringLength">Length of the string to read. Cannot be longer than the <see cref="P:System.IO.FileStream.Length"/></param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.FileStreamEx.ReadString(System.IO.FileStream,System.Text.Encoding)">
            <summary>
            Reads a String from the file. Strings are terminated by 0x00. <para/> The decoded string is defined by the "<paramref name="Encoding"/>" Parameter.
            </summary>
            <param name="FS"></param>
            <param name="Encoding">Encoding to use when getting the string</param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.FileStreamEx.ReadString(System.IO.FileStream,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a String from the file. String length is determined by the "<paramref name="StringLength"/>" parameter. <para/> The decoded string is defined by the "<paramref name="Encoding"/>" Parameter.
            </summary>
            <param name="FS"></param>
            <param name="StringLength">Length of the string to read. Cannot be longer than the <see cref="P:System.IO.FileStream.Length"/></param>
            <param name="Encoding">Encoding to use when getting the string</param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.FileStreamEx.WriteString(System.IO.FileStream,System.String)">
            <summary>
            Writes a string. String won't be null terminated
            </summary>
            <param name="FS"></param>
            <param name="String">String to write to the file</param>
        </member>
        <member name="M:Hack.io.FileStreamEx.WriteString(System.IO.FileStream,System.String,System.Byte)">
            <summary>
            Writes a string. String will be null terminated with the <paramref name="Terminator"/>
            </summary>
            <param name="FS"></param>
            <param name="String">String to write to the file</param>
            <param name="Terminator">The Terminator of the string. Usually 0x00</param>
        </member>
        <member name="M:Hack.io.FileStreamEx.ReadChar(System.IO.FileStream,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a char from the file.
            </summary>
            <param name="FS"></param>
            <param name="CharLength">Expected Length of the Character</param>
            <param name="Encoding">Encoding to use when getting the string</param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.FileStreamEx.PeekByte(System.IO.FileStream)">
            <summary>
            Peek the next byte
            </summary>
            <param name="FS">this</param>
            <returns>The next byte to be read</returns>
        </member>
        <member name="T:Hack.io.MemoryStreamEx">
            <summary>
            Extension of the <see cref="T:System.IO.MemoryStream"/> designed for Big Endian
            </summary>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.Read(System.IO.MemoryStream,System.Int32,System.UInt32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer (For Little Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="Count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or Count is negative.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">Offset and Count describe an invalid range in array.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.Read(System.IO.MemoryStream,System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer (For Little Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="Count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or Count is negative.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">Offset and Count describe an invalid range in array.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.ReadReverse(System.IO.MemoryStream,System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer... but Backwards! (For Big Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="Count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or Count is negative.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">Offset and Count describe an invalid range in array.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.WriteReverse(System.IO.MemoryStream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the file stream... but Backwards! (For Big Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Array">The buffer containing data to write to the stream</param>
            <param name="Offset">The zero-based byte offset in array from which to begin copying bytes to the stream</param>
            <param name="Count">The maximum number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">offset and count describe an invalid range in array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred, or Another thread may have caused an unexpected change in the position of the operating system's file handle</exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed</exception>
            <exception cref="T:System.NotSupportedException">The current stream instance does not support writing</exception>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.ReadString(System.IO.MemoryStream)">
            <summary>
            Reads a String from the file. Strings are terminated by 0x00. <para/> The decoded string is in SHIFT-JIS
            </summary>
            <param name="FS"></param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.ReadString(System.IO.MemoryStream,System.Int32)">
            <summary>
            Reads a String from the file. String length is determined by the "<paramref name="StringLength"/>" parameter. <para/> The decoded string is in SHIFT-JIS
            </summary>
            <param name="FS"></param>
            <param name="StringLength">Length of the string to read. Cannot be longer than the <see cref="P:System.IO.FileStream.Length"/></param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.ReadString(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            Reads a String from the file. Strings are terminated by 0x00. <para/> The decoded string is defined by the "<paramref name="Encoding"/>" Parameter.
            </summary>
            <param name="FS"></param>
            <param name="Encoding">Encoding to use when getting the string</param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.ReadString(System.IO.MemoryStream,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a String from the file. String length is determined by the "<paramref name="StringLength"/>" parameter. <para/> The decoded string is defined by the "<paramref name="Encoding"/>" Parameter.
            </summary>
            <param name="FS"></param>
            <param name="StringLength">Length of the string to read. Cannot be longer than the <see cref="P:System.IO.FileStream.Length"/></param>
            <param name="Encoding">Encoding to use when getting the string</param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.WriteString(System.IO.MemoryStream,System.String)">
            <summary>
            Writes a string. String won't be null terminated
            </summary>
            <param name="FS"></param>
            <param name="String">String to write to the file</param>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.WriteString(System.IO.MemoryStream,System.String,System.Byte)">
            <summary>
            Writes a string. String will be null terminated with the <paramref name="Terminator"/>
            </summary>
            <param name="FS"></param>
            <param name="String">String to write to the file</param>
            <param name="Terminator">The Terminator of the string. Usually 0x00</param>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.ReadChar(System.IO.MemoryStream,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a char from the file.
            </summary>
            <param name="FS"></param>
            <param name="CharLength">Expected Length of the Character</param>
            <param name="Encoding">Encoding to use when getting the string</param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.MemoryStreamEx.PeekByte(System.IO.MemoryStream)">
            <summary>
            Peek the next byte
            </summary>
            <param name="FS">this</param>
            <returns>The next byte to be read</returns>
        </member>
        <member name="T:Hack.io.StreamEx">
            <summary>
            Extension of the <see cref="T:System.IO.Stream"/> designed for Big Endian
            </summary>
        </member>
        <member name="M:Hack.io.StreamEx.Read(System.IO.Stream,System.Int32,System.UInt32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer (For Little Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="Count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or Count is negative.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">Offset and Count describe an invalid range in array.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Hack.io.StreamEx.Read(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer (For Little Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="Count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or Count is negative.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">Offset and Count describe an invalid range in array.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Hack.io.StreamEx.ReadReverse(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer... but Backwards! (For Big Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="Count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or Count is negative.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">Offset and Count describe an invalid range in array.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Hack.io.StreamEx.WriteReverse(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the file stream... but Backwards! (For Big Endian)
            </summary>
            <param name="FS">This</param>
            <param name="Array">The buffer containing data to write to the stream</param>
            <param name="Offset">The zero-based byte offset in array from which to begin copying bytes to the stream</param>
            <param name="Count">The maximum number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">offset and count describe an invalid range in array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred, or Another thread may have caused an unexpected change in the position of the operating system's file handle</exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed</exception>
            <exception cref="T:System.NotSupportedException">The current stream instance does not support writing</exception>
        </member>
        <member name="M:Hack.io.StreamEx.ReadString(System.IO.Stream)">
            <summary>
            Reads a String from the file. Strings are terminated by 0x00. <para/> The decoded string is in SHIFT-JIS
            </summary>
            <param name="FS"></param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.StreamEx.ReadString(System.IO.Stream,System.Int32)">
            <summary>
            Reads a String from the file. String length is determined by the "<paramref name="StringLength"/>" parameter. <para/> The decoded string is in SHIFT-JIS
            </summary>
            <param name="FS"></param>
            <param name="StringLength">Length of the string to read. Cannot be longer than the <see cref="P:System.IO.FileStream.Length"/></param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.StreamEx.ReadString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads a String from the file. Strings are terminated by 0x00. <para/> The decoded string is defined by the "<paramref name="Encoding"/>" Parameter.
            </summary>
            <param name="FS"></param>
            <param name="Encoding">Encoding to use when getting the string</param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.StreamEx.ReadString(System.IO.Stream,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a String from the file. String length is determined by the "<paramref name="StringLength"/>" parameter. <para/> The decoded string is defined by the "<paramref name="Encoding"/>" Parameter.
            </summary>
            <param name="FS"></param>
            <param name="StringLength">Length of the string to read. Cannot be longer than the <see cref="P:System.IO.FileStream.Length"/></param>
            <param name="Encoding">Encoding to use when getting the string</param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.StreamEx.WriteString(System.IO.Stream,System.String)">
            <summary>
            Writes a string. String won't be null terminated
            </summary>
            <param name="FS"></param>
            <param name="String">String to write to the file</param>
        </member>
        <member name="M:Hack.io.StreamEx.WriteString(System.IO.Stream,System.String,System.Byte)">
            <summary>
            Writes a string. String will be null terminated with the <paramref name="Terminator"/>
            </summary>
            <param name="FS"></param>
            <param name="String">String to write to the file</param>
            <param name="Terminator">The Terminator of the string. Usually 0x00</param>
        </member>
        <member name="M:Hack.io.StreamEx.WriteString(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            Writes a string. String will be NULL terminated
            </summary>
            <param name="FS"></param>
            <param name="String">String to write to the file</param>
            <param name="Encoding"></param>
        </member>
        <member name="M:Hack.io.StreamEx.WriteSByte(System.IO.Stream,System.SByte)">
            <summary>
            writes an SByte
            </summary>
            <param name="FS"></param>
            <param name="Data">The SByte</param>
        </member>
        <member name="M:Hack.io.StreamEx.WriteColour(System.IO.Stream,System.Drawing.Color,System.String)">
            <summary>
            Writes a Colour to a stream
            </summary>
        </member>
        <member name="M:Hack.io.StreamEx.PadTo(System.IO.Stream,System.Int32,System.Byte)">
            <summary>
            Adds Padding to the Current Position in the provided Stream
            </summary>
            <param name="FS">The Stream to add padding to</param>
            <param name="Multiple">The byte multiple to pad to</param>
            <param name="Padding">The byte multiple to pad to</param>
        </member>
        <member name="M:Hack.io.StreamEx.ReadChar(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads a char from the file.
            </summary>
            <param name="FS"></param>
            <param name="Encoding">Encoding to use when getting the string</param>
            <returns>Complete String</returns>
        </member>
        <member name="M:Hack.io.StreamEx.PeekByte(System.IO.Stream)">
            <summary>
            Peek the next byte
            </summary>
            <param name="FS">this</param>
            <returns>The next byte to be read</returns>
        </member>
        <member name="T:Hack.ConsoleEx.ConsoleEx">
            <summary>
            Extension of the console
            </summary>
        </member>
        <member name="M:Hack.ConsoleEx.ConsoleEx.Confirm(System.ConsoleKey,System.ConsoleKey)">
            <summary>
            Checks to see if the user presses certain keys
            </summary>
            <param name="YesKey">The key to indicate "Yes"</param>
            <param name="NoKey">The key to indicate "No"</param>
            <returns>true if the user presses the YesKey</returns>
        </member>
        <member name="M:Hack.ConsoleEx.ConsoleEx.WriteColoured(System.String,System.ConsoleColor,System.ConsoleColor,System.Boolean)">
            <summary>
            Writes a coloured message to the console
            </summary>
            <param name="message">Message to print</param>
            <param name="ForeColour">ConsoleColor to use for the text</param>
            <param name="BackColour">ConsoleColor to use for the background of the text</param>
            <param name="newline">Switch to the next line?</param>
        </member>
        <member name="M:Hack.ConsoleEx.ConsoleEx.Quit(System.Int32,System.String)">
            <summary>
            Quits the Console with a given error message
            </summary>
            <param name="ExitCode">Code to exit with.</param>
            <param name="ErrorMsg">The error message</param>
        </member>
    </members>
</doc>
